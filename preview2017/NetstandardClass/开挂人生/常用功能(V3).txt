判断是否是枚举的值：  if (Enum.IsDefined(typeof(GuardCardStatusEnum), dto.Status))
            {
                sql += "and a.status=@Status ";
            }


			 new[] { nameof(TVehicle.TotalMileage), nameof(TVehicle.CorrectionTime) });
			

		    public string  MarkerRelationBitwiseDesc
        {
            get
            {
              //  var enu = (MakerRelationBitwiseEnum)MarkerRelationBitwise;
                return MarkerRelationBitwise.GetEnumText<MakerRelationBitwiseEnum>();
            }
        }

		多数据库操作：
		using (var conn = GetConnection("icb_main"))
            {
                if (account != null)
                {
                    account.Id = employee.Id;
                    count = conn.Insert(account);
                }
                else
                {
                    const string sql = "update `t_account` set `type`=(`type`|@type) where `id`=@id;";
                    count = conn.Execute(sql, new { type = (int)AccountTypeEnum.MakerUser, id = employee.Id });
                }
            }
            count += Connection.Insert(employee, null, Trans);

			正则验证：
			        [RegularExpression("\\d{11}",ErrorMessage ="手机号码格式不正确")]

					第三方加密方式：


					http请求我们的文件服务器：   public static string PdfToJpg(string pdfurl)
        {
            var fileServerMain = "sites:file".Config<string>();
            var fileServer = $"{fileServerMain}/uploader/";
            string jpgPath = "";
            var helper1 = HttpHelper.Instance.PostAsync(new HttpRequest(fileServer)
            {
                Data = new { action = "downloadpdf", url = pdfurl },
                BodyType = HttpBodyType.Form
            }).Result;
            var dd = helper1.Content.ReadAsStringAsync().Result;
            Regex reg = new Regex("\"url\":\"(.+)\"");
            Match match = reg.Match(dd);
            if (match.Groups.Count > 0)
                jpgPath = match.Groups[1].Value;
            return jpgPath;

        }
		数据更新的列
		  public int Update(TMakerEmployee model, List<string> props)
        {
            // 更新t_account
            var accountProps = new List<string>();
            if (props.Contains(nameof(TMakerEmployee.Name)))
                accountProps.Add(nameof(TAccount.Name));
            if (props.Contains(nameof(TAccount.Mobile)))
                accountProps.Add(nameof(TAccount.Mobile));
            if (accountProps.Any())
            {
                using (var conn = GetConnection("大多数"))
                {
                    conn.Update(new TAccount
                    {
                        Id = model.Id,
                        Name = model.Name,
                        Mobile = model.Mobile
                    }, accountProps.ToArray());
                }
            }

            if (props.Count < 1)
                return 1;
                //throw new BusiException("没有更新的东西");

            return Connection.Update(model, props.ToArray());